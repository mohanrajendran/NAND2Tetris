// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {
    field int length;
    field int capacity;
    field Array byteArray;

    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
        if (maxLength < 1) {
            let maxLength = 1;
        }
        let byteArray = Array.new(maxLength);
        let length = 0;
        let capacity = maxLength;

        return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
        do byteArray.dispose();

        return;
    }

    /** Returns the current length of this String. */
    method int length() {
        return length;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
        return byteArray[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
        let byteArray[j] = c;

        return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
        if (length < capacity) {
            let byteArray[length] = c;
            let length = length + 1;
        }

        return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
        if (length > 0) {
            let length = length - 1;
        }

        return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
        var int index, result;
        var boolean neg;

        if ((length > 0) & (byteArray[0] = 45)) {
            let neg = true;
            let index = 1;
        } else {
            let neg = false;
            let index = 0;
        }

        let result = 0;

        while ((index < length) & String.isDigit(byteArray[index])) {
            let result = result * 10 + (byteArray[index] - 48);
            let index = index + 1; 
        }

        if (neg) {
            let result = -result;
        }

        return result;
    }

    /** Checks if a character is a digit */
    function boolean isDigit(char c) {
        return ((c > 47) & (c < 58));
    } 

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {
        let length = 0;
        
        if (number < 0) {
            let number = -number;
            do appendChar(45);
        }

        do setIntHelper(number);

        return;
    }

    method void setIntHelper(int number) {
        var int nextNum, lastDigit;

        if (number < 10) {
            do appendChar(48 + number);
            return;
        }

        let nextNum = (number / 10);
        let lastDigit = number - (nextNum * 10);
        do setIntHelper(nextNum);
        do appendChar(48 + lastDigit);

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
