function Screen.init 0
push constant 0
not
pop static 0
push constant 16384
pop static 1
push constant 24576
pop static 2
push constant 511
pop static 3
push constant 255
pop static 4
push constant 16
call Array.new 1
pop static 5
push constant 0
push static 5
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push static 5
add
push constant 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push static 5
add
push constant 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push static 5
add
push constant 8
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 4
push static 5
add
push constant 16
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 5
push static 5
add
push constant 32
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 6
push static 5
add
push constant 64
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 7
push static 5
add
push constant 128
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 8
push static 5
add
push constant 256
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 9
push static 5
add
push constant 512
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 10
push static 5
add
push constant 1024
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 11
push static 5
add
push constant 2048
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 12
push static 5
add
push constant 4096
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 13
push static 5
add
push constant 8192
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 14
push static 5
add
push constant 16384
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 15
push static 5
add
push constant 16384
push constant 16384
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Screen.clearScreen 1
push static 1
pop local 0
label WHILE_LOOP0
push local 0
push static 2
lt
not
if-goto WHILE_CONTINUE0
push local 0
push constant 0
call Memory.poke 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_LOOP0
label WHILE_CONTINUE0
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 0
push constant 0
return
function Screen.drawPixel 5
push constant 0
push argument 0
push static 3
call Math.min 2
call Math.max 2
pop argument 0
push constant 0
push argument 1
push static 4
call Math.min 2
call Math.max 2
pop argument 1
push static 1
push argument 1
push constant 32
call Math.multiply 2
add
push argument 0
push constant 16
call Math.divide 2
add
pop local 0
push argument 0
push constant 15
and
pop local 1
push local 0
call Memory.peek 1
pop local 3
push local 1
push static 5
add
pop pointer 1
push that 0
pop local 2
push static 0
not
if-goto IF_ELSE0
push local 3
push local 2
or
pop local 4
goto IF_CONTINUE0
label IF_ELSE0
push local 3
push local 2
not
and
pop local 4
label IF_CONTINUE0
push local 0
push local 4
call Memory.poke 2
pop temp 0
push constant 0
return
function Screen.drawLine 2
push argument 2
push argument 0
sub
pop local 0
push argument 3
push argument 1
sub
pop local 1
push local 0
push constant 0
eq
push local 1
push constant 0
eq
and
not
if-goto IF_ELSE0
push argument 0
push argument 1
call Screen.drawPixel 2
pop temp 0
push constant 0
return
goto IF_CONTINUE0
label IF_ELSE0
label IF_CONTINUE0
push local 0
push constant 0
eq
not
if-goto IF_ELSE1
push local 1
push constant 0
gt
not
if-goto IF_ELSE2
push argument 0
push argument 1
push argument 3
call Screen.drawVerticalLine 3
pop temp 0
goto IF_CONTINUE2
label IF_ELSE2
push argument 0
push argument 3
push argument 1
call Screen.drawVerticalLine 3
pop temp 0
label IF_CONTINUE2
push constant 0
return
goto IF_CONTINUE1
label IF_ELSE1
label IF_CONTINUE1
push local 1
push constant 0
eq
not
if-goto IF_ELSE3
push local 0
push constant 0
gt
not
if-goto IF_ELSE4
push argument 1
push argument 0
push argument 2
call Screen.drawHorizontalLine 3
pop temp 0
goto IF_CONTINUE4
label IF_ELSE4
push argument 1
push argument 2
push argument 0
call Screen.drawHorizontalLine 3
pop temp 0
label IF_CONTINUE4
push constant 0
return
goto IF_CONTINUE3
label IF_ELSE3
label IF_CONTINUE3
push local 0
push constant 0
gt
not
if-goto IF_ELSE5
push argument 0
push argument 1
push argument 2
push argument 3
call Screen.drawDiagonalLine 4
pop temp 0
goto IF_CONTINUE5
label IF_ELSE5
push argument 2
push argument 3
push argument 0
push argument 1
call Screen.drawDiagonalLine 4
pop temp 0
label IF_CONTINUE5
push constant 0
return
function Screen.drawVerticalLine 0
label WHILE_LOOP0
push argument 2
push argument 1
lt
not
not
if-goto WHILE_CONTINUE0
push argument 0
push argument 1
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 1
add
pop argument 1
goto WHILE_LOOP0
label WHILE_CONTINUE0
push constant 0
return
function Screen.drawHorizontalLine 0
label WHILE_LOOP0
push argument 2
push argument 1
lt
not
not
if-goto WHILE_CONTINUE0
push argument 1
push argument 0
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 1
add
pop argument 1
goto WHILE_LOOP0
label WHILE_CONTINUE0
push constant 0
return
function Screen.drawDiagonalLine 5
push argument 2
push argument 0
sub
pop local 0
push argument 3
push argument 1
sub
pop local 1
push constant 0
pop local 2
push constant 0
pop local 3
push constant 0
pop local 4
push local 1
push constant 0
gt
not
if-goto IF_ELSE0
label WHILE_LOOP1
push local 2
push local 0
gt
not
push local 3
push local 1
gt
not
and
not
if-goto WHILE_CONTINUE1
push argument 0
push local 2
add
push argument 1
push local 3
add
call Screen.drawPixel 2
pop temp 0
push local 4
push constant 0
lt
not
if-goto IF_ELSE2
push local 2
push constant 1
add
pop local 2
push local 4
push local 1
add
pop local 4
goto IF_CONTINUE2
label IF_ELSE2
push local 3
push constant 1
add
pop local 3
push local 4
push local 0
sub
pop local 4
label IF_CONTINUE2
goto WHILE_LOOP1
label WHILE_CONTINUE1
goto IF_CONTINUE0
label IF_ELSE0
label WHILE_LOOP3
push local 2
push local 0
gt
not
push local 3
push local 1
lt
not
and
not
if-goto WHILE_CONTINUE3
push argument 0
push local 2
add
push argument 1
push local 3
add
call Screen.drawPixel 2
pop temp 0
push local 4
push constant 0
lt
not
if-goto IF_ELSE4
push local 3
push constant 1
sub
pop local 3
push local 4
push local 0
add
pop local 4
goto IF_CONTINUE4
label IF_ELSE4
push local 2
push constant 1
add
pop local 2
push local 4
push local 1
add
pop local 4
label IF_CONTINUE4
goto WHILE_LOOP3
label WHILE_CONTINUE3
label IF_CONTINUE0
push constant 0
return
function Screen.drawRectangle 0
label WHILE_LOOP0
push argument 0
push argument 2
gt
not
not
if-goto WHILE_CONTINUE0
push argument 0
push argument 1
push argument 0
push argument 3
call Screen.drawLine 4
pop temp 0
push argument 0
push constant 1
add
pop argument 0
goto WHILE_LOOP0
label WHILE_CONTINUE0
push constant 0
return
function Screen.drawCircle 2
push argument 2
neg
pop local 1
label WHILE_LOOP0
push local 1
push argument 2
gt
not
not
if-goto WHILE_CONTINUE0
push argument 2
push argument 2
call Math.multiply 2
push local 1
push local 1
call Math.multiply 2
sub
call Math.sqrt 1
pop local 0
push argument 0
push local 0
sub
push argument 1
push local 1
add
push argument 0
push local 0
add
push argument 1
push local 1
add
call Screen.drawLine 4
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_LOOP0
label WHILE_CONTINUE0
push constant 0
return
